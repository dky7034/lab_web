<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 마이바티스(MyBatis) 프레임워크에서 사용하는 SQL 매퍼 파일 -->

<!-- POSTS 테이블에서 CRUD에 필요한 SQL 문장들을 선언 -->
<!-- namespace: 매퍼 파일에 정의된 SQL 문장들이 어떤 인터페이스와 연결되는지를 지정 -->
<!-- namespace: 매퍼 파일에 정의된 SQL 문장들이 연결되는 인터페이스의 패키지 경로와 클래스 이름 지정 -->
<mapper namespace="com.itwill.spring2.repository.PostDao">
	
	<!-- POSTS 테이블 전체 검색, 아이디 내림차순 정렬 -->
	<!-- 여기서의 resultType은 mybatis-config.xml 에서 별칭(alias)으로 지정한데로 작성하면 됨 -->
	<select id="selectOrderByIdDesc" resultType="Post"> <!-- DB에서 select 시 반환되는 값의 타입 설정 -->
		select * from POSTS order by ID desc
	</select>
	
	<!-- POSTS 테이블에서 아이디(PK)로 검색 -->
	<select id="selectById" resultType="Post"> <!-- DB에서 select 시 반환되는 값의 타입 설정 -->
		select * from POSTS where ID = #{id}
	</select>
	
	<!-- POSTS 테이블에 새 포스트 삽입 -->
	<insert id="insert">
		insert into POSTS (TITLE, CONTENT, AUTHOR) values (#{title}, #{content}, #{author}) 
		<!-- #{} 부분은 대소문자 구별! (Post class 에서 작성한 것과 같아야 함 -->
		<!-- #{} 부분은 입력한 객체의 getter 메서드를 호출한다고 생각하면 됨 -->
		<!-- ex. #{title} -> Post 클래스의 getTitle() 메서드 실행하는 것 -->
	</insert>
	
	<!-- POSTS 테이블에서 해당 아이디의 제목, 내용, 수정시간을 업데이트 -->
	<update id="update">
		update POSTS 
		set TITLE = #{title}, CONTENT = #{content}, MODIFIED_TIME = systimestamp 
		where id = #{id}
	</update>
	
	<!-- POSTS 테이블에서 입력한 아이디에 해당하는 포스트 삭제 -->
	<delete id="delete">
		delete from POSTS where ID = #{id}
	</delete>
	
	<!-- POSTS 테이블에서 제목, 내용, 제목 또는 내용, 작성자로 검색하기 -->
    <select id="search" resultType="Post">
    	<!-- <bind> 개념 정리:
    	개념: 외부에서 전달된 파라미터를 이용하여 변수를 생성하는 엘리먼트.
    	조건: MyBatis version 3.2.3 이상에서 사용.
    	동적 쿼리문 안에 작성.
    	name 속성: 작성자가 지정할 변수 이름.
    	value 속성: 받아오는 파라미터 값.
    	-->
        <bind name="searchKeyword" value="'%' + keyword + '%'" />
        <!-- keyword 는 어디서 나온 것일까?
        param.getKeyword()를 호출한 것.
        PostSearchDto.java에 필드로 keyword가 선언되어 있음.
        PostDao에서 아규먼트로 넘긴 PostSearchDto에 필드로 선언된 keyword를 get() 메서드로 가져옴.
        -->
        select * from POSTS
        <!-- where를 태그로 사용 -->
        <where>
            <choose>
                <when test='category eq "text"'>
                <!-- category 는 어디서 나온 것일까?
        		param.getCategory()를 호출한 것.
        		PostSearchDto.java에 필드로 category가 선언되어 있음.
        		PostDao에서 아규먼트로 넘긴 PostSearchDto에 필드로 선언된 category를 get() 메서드로 가져옴.
        		-->
                    upper(TITLE) like upper(#{searchKeyword})
                </when>
                <when test='category eq "content"'>
                    upper(CONTENT) like upper(#{searchKeyword})
                </when>
                <when test='category eq "textandcontent"'>
                    upper(TITLE) like upper(#{searchKeyword}) 
                    or 
                    upper(CONTENT) like upper(#{searchKeyword})
                </when>
                <when test='category eq "author"'>
                    upper(AUTHOR) like upper(#{searchKeyword})
                </when>
            </choose>
        </where>
        order by ID desc
    </select>
    
</mapper>