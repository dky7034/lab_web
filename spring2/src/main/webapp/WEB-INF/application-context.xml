<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
        http://mybatis.org/schema/mybatis-spring https://mybatis.org/schema/mybatis-spring.xsd">

	<!-- HikariConfig 객체를 생성하면 커넥션 풀이 생성되는 것은 아닙니다. 
	HikariConfig 객체는 단순히 커넥션 풀에 대한 환경 설정 정보를 저장하는 객체일 뿐입니다.
	HikariConfig 객체를 생성하고, 이 객체에 데이터베이스 연결 정보와 커넥션 풀 관련 설정 정보를 설정한 후, 
	이 HikariConfig 객체를 사용하여 HikariDataSource 객체를 생성합니다. 
	HikariDataSource 객체는 내부적으로 HikariConfig 객체를 사용하여 커넥션 풀을 생성합니다.
	즉, HikariConfig 객체는 커넥션 풀 관련 설정 정보를 저장하는 역할을 하고, 
	HikariDataSource 객체는 이 설정 정보를 사용하여 커넥션 풀을 생성하는 역할을 합니다. -->

	<!-- bean definitions here -->
	<!-- HikariConfig 객체(=bean) 생성을 위한 설정 -->
	<!-- HikariConfig hikariConfig = new HikariConfig() -->
	<!-- HikariCP에서 사용되어 데이터베이스 연결 풀링을 구성하고, 커넥션 풀에 대한 설정 정보를 저장한 객체 생성 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- hikariConfig.setDriverClassName("") -->
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" /> <!-- JDBC 드라이버 클래스 이름 지정 -->
		<!-- config.setJdbcUrl("jdbc:oracle:thin:@localhost:1521:xe"); -->
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe" /> <!-- DB 접속 URL -->
		<!-- config.setUsername("scott"); -->
		<property name="username" value="scott" /> <!-- DB 사용자 이름 -->
		<!-- config.setPassword("tiger"); -->
		<property name="password" value="tiger" /> <!-- DB 사용자 비밀번호 -->
	</bean>
	
	<!-- HikariDataSource 객체(bean) 생성을 위한 설정 -->
	<!-- HikariDataSource ds = new HikariDataSource(hikariConfig); -->
	<!-- HikariCP에서 사용되는 데이터 소스 클래스로 DB 연결 풀링을 구성하는 데 사용됨 -->
	<!-- 커넥션 풀에 대한 설정 정보를 저장한 객체를 아규먼트로 받아 물리적(실재) 커넥션 풀(DTO) 객체 생성 -->
	<bean id="ds" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="hikariConfig" /> <!-- 생성자의 아규먼트 세팅 -->
	</bean>
	
	<!-- SqlSessionFactoryBean:
		데이터 소스(커넥션 풀)를 이용해서 SQL 문장들을 실행/결과 처리를 하고 리턴하는 객체. -->
	<bean id="session" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds" /> <!-- id가 ds인 다른 bean 참조 -->
		<property name="mapperLocations" value="classpath:/mappers/**/*.xml" /> <!-- SQL 매퍼 파일 경로 지정 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" /> <!-- MyBatis 구성 파일 위치 설정 -->
		<!-- classpath: Java Resources의 하위 폴더(classpath로 정의되어 있음)  -->
		<!-- **: 하위폴더 개수는 상관 없음 -->
	</bean>
	
	<!-- MyBatis 프레임워크에서 생성하고 관리하는 빈(bean)들을 base-package와 그 하위 패키지에서 찾음. 
		PostDao, UserDao "인터페이스"를 작성하는 패키지. -->
	<mybatis:scan base-package="com.itwill.spring2.repository" />
	
	<!-- 스프링 컨테이너에서 컴포넌트 빈(예: @Service, @Component, ...)들을 검색할 기본 패키지를 설정 -->
	<!-- Spring이 com.itwill.spring2.service 패키지와 해당 하위 패키지에서 시작하여 주석이 달린 구성 요소를 찾는다는 것을 의미 -->
	<context:component-scan base-package="com.itwill.spring2.service" />
	
</beans>